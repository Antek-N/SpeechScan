name: Build EXE on PR

# Run only on pull requests targeting develop or main
on:
  pull_request:
    branches: [develop, main]

# Concurrency: one run per commit in a PR
concurrency:
  group: pr-exe-${{ github.event.pull_request.head.sha }}
  cancel-in-progress: true

# Least-privilege permissions
permissions:
  contents: read

# Global environment variables
env:
  PYTHON_VERSION: "3.12"
  APP_NAME: "SpeechScan"
  SPEC_PATH: "SpeechScan.spec"

# Job: build Windows EXE with PyInstaller
jobs:
  build-windows-exe:
    name: Build Windows EXE (PyInstaller)
    runs-on: windows-latest
    timeout-minutes: 30
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"

    steps:
      # Get repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Install chosen Python version + cache pip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      # Install Poetry itself (via pip)
      - name: Install Poetry
        run: python -m pip install --upgrade pip poetry

      # Keep virtualenv inside repo for easier caching
      - name: Enable in-project venv for Poetry
        run: poetry config virtualenvs.in-project true

      # Cache the .venv folder based on lockfile + Python version
      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      # Install all dependencies (main + dev) from pyproject.toml
      - name: Install deps (poetry)
        run: poetry install --no-interaction --with dev

      # Verify .spec file exists, otherwise fail with error
      - name: Verify .spec exists
        run: |
          if (-not (Test-Path "${{ env.SPEC_PATH }}")) {
            Write-Error "Missing PyInstaller spec file '${{ env.SPEC_PATH }}'"
          }

      # Build EXE using PyInstaller with the .spec file
      # Then list the contents of dist/ for debugging/logging
      - name: Build exe with PyInstaller (.spec only)
        run: |
          poetry run pyinstaller --noconfirm --clean "${{ env.SPEC_PATH }}"
          if (Test-Path dist) { Get-ChildItem -Recurse dist | Format-Table -AutoSize }

      # Upload the dist/ folder as artifact for download
      - name: Upload artifact (dist)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-dist
          path: dist/**
          if-no-files-found: error
          retention-days: 7